using System;
using System.Text.RegularExpressions;

namespace OWZX.Core
{
    /// <summary>
    /// 验证帮助类
    /// </summary>
    public class ValidateHelper
    {
        //邮件正则表达式
        private static Regex _emailregex = new Regex(@"^[a-z0-9]([a-z0-9]*[-_]?[a-z0-9]+)*@([a-z0-9]*[-_]?[a-z0-9]+)+[\.][a-z]{2,3}([\.][a-z]{2})?$", RegexOptions.IgnoreCase);
        //手机号正则表达式
        private static Regex _mobileregex = new Regex("^(13|15|17|18)[0-9]{9}$");
        //固话号正则表达式
        private static Regex _phoneregex = new Regex(@"^(\d{3,4}-?)?\d{7,8}$");
        //IP正则表达式
        private static Regex _ipregex = new Regex(@"^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$");
        //日期正则表达式
        private static Regex _dateregex = new Regex(@"(\d{4})-(\d{1,2})-(\d{1,2})");
        //数值(包括整数和小数)正则表达式
        private static Regex _numericregex = new Regex(@"^[-]?[0-9]+(\.[0-9]+)?$");
        //邮政编码正则表达式
        private static Regex _zipcoderegex = new Regex(@"^\d{6}$");
        //验证广州移动号码
        private static string _gzydregex = string.Format(@"1341115|1350000|1360000|1370249|1380020|1390007|1471450|1500200|1510200|1520200|1571070|1580000|1590200|1820200|1870200|1880200|1341116|1350001|1360001|1371000|1380240|1390020|1471451|1500201|1510201|1520201|1571071|1580001|1590201|1820201|1870201|1880201|1341613|1350240|1360048|1371012|1380274|1390229|1471503|1501178|1511203|1521722|1571173|1580028|1591313|1821844|1871887|1881880|1341618|1350300|1360223|1371017|1380279|1390239|1471565|1501183|1511208|1521734|1571178|1580203|1591318|1821867|1871914|1881885|
                1341117|1350002|1360002|1371001|1380241|1390023|1471452|1500202|1510202|1520202|1571072|1580002|1590202|1820202|1870202|1880202|1341118|1350003|1360003|1371002|1380242|1390030|1471453|1500203|1510203|1520203|1571073|1580003|1590203|1820203|1870203|1880203|1341612|1350224|1360047|1371011|1380273|1390228|1471502|1501177|1511202|1521721|1571172|1580027|1591312|1821840|1871884|1881841|1341617|1350246|1360222|1371016|1380278|1390238|1471564|1501182|1511207|1521733|1571177|1580202|1591317|1821863|1871913|1881884|
                1341119|1350022|1360004|1371003|1380243|1390220|1471454|1500204|1510204|1520204|1571074|1580004|1590204|1820204|1870204|1880204|1341410|1350147|1360005|1371004|1380244|1390221|1471481|1501170|1510205|1520205|1571085|1580020|1590205|1820207|1870207|1880205|1341611|1350154|1360046|1371010|1380272|1390227|1471501|1501176|1511201|1521720|1571171|1580026|1591311|1821835|1871874|1881840|1341616|1350245|1360221|1371015|1380277|1390233|1471563|1501181|1511206|1521732|1571176|1580201|1591316|1821849|1871891|1881883|
                1341411|1350148|1360006|1371005|1380250|1390222|1471482|1501171|1510206|1520206|1571086|1580021|1590206|1820666|1870208|1880206|1341412|1350150|1360007|1371006|1380251|1390223|1471483|1501172|1510207|1520207|1571087|1580022|1590207|1820764|1870209|1880207|1341610|1350153|1360045|1371009|1380254|1390226|1471500|1501175|1511200|1521719|1571170|1580025|1591310|1821834|1871841|1881839|1341615|1350244|1360220|1371014|1380276|1390232|1471506|1501180|1511205|1521731|1571175|1580200|1591315|1821847|1871890|1881882|
                1341413|1350151|1360008|1371007|1380252|1390224|1471484|1501173|1510208|1520208|1571088|1580023|1590208|1821801|1871839|1880208|1341414|1350152|1360009|1371008|1380253|1390225|1471485|1501174|1510209|1520209|1571089|1580024|1590209|1821818|1871840|1880209|1341414|1350152|1360009|1371008|1380253|1390225|1471485|1501174|1510209|1520209|1571089|1580024|1590209|1821818|1871840|1880209|1341614|1350241|1360049|1371013|1380275|1390230|1471505|1501179|1511204|1521730|1571174|1580029|1591314|1821846|1871888|1881881|1341622|1350304|1360229|1371021|1380288|1390301|1471570|1501187|1511212|1521747|1571182|1581187|1591422|1871936|
                1341619|1350301|1360226|1371018|1380280|1390240|1471567|1501184|1511209|1521744|1571179|1580204|1591319|1821870|1871924|1881886|1341620|1350302|1360227|1371019|1380283|1390249|1471568|1501185|1511210|1521745|1571180|1581185|1591420|1821876|1871925|1881887|1341621|1350303|1360228|1371020|1380284|1390300|1471569|1501186|1511211|1521746|1571181|1581186|1591421|1821888|1871926|1881888|1357057|1368226|1357058|1368227|1357059|1368228|1357070|1368229|1357071|1368885|1357072|1368886|1357073|1368887|1357074|1368888|1357090|1368889|1357091|1369420|1357092|1369421|1357093|1369422|1357094|1369423|1357095|1369424|1357096|1369425|1357097|1369426|1357098|1369427|1357099|1369428|1358030|1369429|1358031|1369740|1358032|1369741|1358033|1369742|1358034|1369743|1358035|1369744|1358036|1369745|1358037|1369746|1358038|1369747|1358039|1369748|1358040|1369749|1358041|1369970|1358042|1369971|1358043|1369972|1358044|1369973|1358045|1369974|1358046|1358047|1358048|1358049|1358050|1358051|1358052|1358053|1358054|1358055|1358056|1358057|1358058|1358059|
                1357027|1367246|1379807|1357028|1367247|1379808|1357029|1367248|1379809|1357030|1367249|1379810|1357031|1367620|1379811|1357032|1367621|1379812|1357033|1367622|1379813|1357034|1367623|1379814|1357035|1367624|1379815|1357036|1367625|1379816|1357037|1367626|1379817|1357038|1367627|1379818|1357039|1367628|1379819|1357040|1367629|1357041|1367890|1357042|1367891|1357043|1367892|1357044|1367893|1357045|1367894|1357046|1367895|1357047|1367896|1357048|1367897|1357049|1367898|1357050|1367899|1357051|1368220|1357052|1368221|1357053|1368222|1357054|1368223|1357055|1368224|1357056|1368225|1341626|1350308|1360243|1371025|1380293|1392210|1471625|1501191|1511216|1521763|1571186|1581241|1591426|1871941|1341625|1350307|1360242|1371024|1380292|1390307|1471623|1501190|1511215|1521762|1571185|1581240|1591425|1871940|
                1356035|1366089|1376080|1356036|1366230|1376081|1356037|1366231|1376082|1356038|1366232|1376083|1356039|1366233|1376084|1356040|1366234|1376085|1356041|1366235|1376086|1356042|1366236|1376087|1356043|1366237|1376088|1356044|1366238|1376089|1356045|1366239|1376330|1356046|1366240|1376331|1356047|1366241|1376332|1356048|1366242|1376333|1356049|1366243|1376334|1357000|1366244|1376335|1357001|1366245|1376336|1357002|1366246|1376337|1357003|1366247|1376338|1357004|1366248|1376339|1357005|1366249|1379430|1357006|1366250|1379431|1357007|1366251|1379432|1357008|1366252|1379433|1357009|1366253|1379434|1357010|1366254|1379435|1357011|1366890|1379436|1357012|1366891|1379437|1357013|1366892|1379438|1357014|1366893|1379439|1357015|1366894|1379440|1357016|1366895|1379441|1357017|1366896|1379442|1357018|1366897|1379443|1357019|1366898|1379444|1357020|1366899|1379800|1357021|1367240|1379801|1357022|1367241|1379802|1357023|1367242|1379803|1357024|1367243|1379804|1357025|1367244|1379805|1357026|1367245|1379806|
                1355615|1366049|1375170|1355616|1366050|1375171|1355617|1366051|1375172|1355618|1366052|1375173|1355619|1366053|1375174|1356000|1366054|1375175|1356001|1366055|1375176|1356002|1366056|1375177|1356003|1366057|1375178|1356004|1366058|1375179|1356005|1366059|1375180|1356006|1366060|1375181|1356007|1366061|1375182|1356008|1366062|1375183|1356009|1366063|1375184|1356010|1366064|1375185|1356011|1366065|1375186|1356012|1366066|1375187|1356013|1366067|1375188|1356014|1366068|1375189|1356015|1366069|1376060|1356016|1366070|1376061|1356017|1366071|1376062|1356018|1366072|1376063|1356019|1366073|1376064|1356020|1366074|1376065|1356021|1366075|1376066|1356022|1366076|1376067|1356023|1366077|1376068|1356024|1366078|1376069|1356025|1366079|1376070|1356026|1366080|1376071|1356027|1366081|1376072|1356028|1366082|1376073|1356029|1366083|1376074|1356030|1366084|1376075|1356031|1366085|1376076|1356032|1366086|1376077|1356033|1366087|1376078|1356034|1366088|1376079|
                1354453|1366027|1372983|1354454|1366028|1372984|1354455|1366029|1372985|1354456|1366030|1372986|1354457|1366031|1372987|1354458|1366032|1372988|1354459|1366033|1372989|1355600|1366034|1374021|1355601|1366035|1374022|1355602|1366036|1374023|1355603|1366037|1374027|1355604|1366038|1374028|1355605|1366039|1374029|1355606|1366040|1374124|1355607|1366041|1374212|1355608|1366042|1374213|1355609|1366043|1374214|1355610|1366044|1374215|1355611|1366045|1374216|1355612|1366046|1374217|1355613|1366047|1374218|1355614|1366048|1374219|1354449|1366023|1372809|1354450|1366024|1372980|1354451|1366025|1372981|1354452|1366026|1372982|1341624|1350306|1360241|1371023|1380291|1390306|1471581|1501189|1511214|1521761|1571184|1581189|1591424|1871938|1341623|1350305|1360240|1371022|1380290|1390305|1471580|1501188|1511213|1521760|1571183|1581188|1591423|1871937|
                1348029|1353998|1365092|1372548|1598919|1353999|1365093|1372549|1598920|1354340|1365094|1372670|1598921|1354341|1365095|1372671|1598922|1354342|1365096|1372672|1598923|1354343|1365097|1372673|1598924|1354344|1365098|1372674|1598925|1354345|1365099|1372675|1598926|1354346|1366000|1372676|1598927|1354347|1366001|1372677|1598928|1354348|1366002|1372678|1598929|1354349|1366003|1372679|1599240|1354430|1366004|1372680|1599241|1354431|1366005|1372681|1599242|1354432|1366006|1372682|1599243|1354433|1366007|1372683|1599244|1354434|1366008|1372684|1599245|1354435|1366009|1372685|1599246|1354436|1366010|1372686|1599247|1354437|1366011|1372687|1599248|1354438|1366012|1372688|1599249|1354439|1366013|1372689|1599990|1354440|1366014|1372800|1599991|1354441|1366015|1372801|1599992|1354442|1366016|1372802|1599993|1354443|1366017|1372803|1599994|1354444|1366018|1372804|1599995|1354445|1366019|1372805|1599996|1354446|1366020|1372806|1599997|1354447|1366021|1372807|1599998|1354448|1366022|1372808|1599999|
                1345039|1353978|1365072|1372528|1598644|1345040|1353979|1365073|1372529|1598900|1345041|1353980|1365074|1372530|1598901|1345042|1353981|1365075|1372531|1598902|1345043|1353982|1365076|1372532|1598903|1345044|1353983|1365077|1372533|1598904|1345045|1353984|1365078|1372534|1598905|1345046|1353985|1365079|1372535|1598906|1345047|1353986|1365080|1372536|1598907|1345048|1353987|1365081|1372537|1598908|1345049|1353988|1365082|1372538|1598909|1348020|1353989|1365083|1372539|1598910|1348021|1353990|1365084|1372540|1598911|1348022|1353991|1365085|1372541|1598912|1348023|1353992|1365086|1372542|1598913|1348024|1353993|1365087|1372543|1598914|1348025|1353994|1365088|1372544|1598915|1348026|1353995|1365089|1372545|1598916|1348027|1353996|1365090|1372546|1598917|1348028|1353997|1365091|1372547|1598918|
                1343563|1353892|1364230|1372482|1597553|1343564|1353893|1364231|1372483|1597554|1343565|1353894|1364232|1372484|1597555|1343566|1353895|1364233|1372485|1597556|1343567|1353896|1364260|1372486|1597557|1343568|1353897|1364261|1372487|1597558|1343569|1353898|1364262|1372488|1597559|1343780|1353899|1364263|1372489|1597560|1343781|1353940|1364264|1372510|1597561|1343782|1353941|1364265|1372511|1597562|1343783|1353942|1364266|1372512|1597563|1343784|1353943|1364267|1372513|1597564|1345020|1353944|1364268|1372514|1598630|1345021|1353945|1364269|1372515|1598631|1345022|1353946|1364270|1372516|1598632|1345023|1353947|1364271|1372517|1598633|1345024|1353948|1364272|1372518|1598634|1345025|1353949|1364273|1372519|1598635|1345026|1353970|1364274|1372520|1598636|1345027|1353971|1364275|1372521|1598637|1345028|1353972|1364276|1372522|1598638|1345029|1353973|1364277|1372523|1598639|1345035|1353974|1364278|1372524|1598640|1345036|1353975|1364279|1372525|1598641|1345037|1353976|1365070|1372526|1598642|1345038|1353977|1365071|1372527|1598643|
                1343417|1353556|1364064|1371946|1592097|1343418|1353557|1364065|1371947|1592098|1343419|1353558|1364066|1371948|1592099|1343420|1353559|1364067|1371949|1597530|1343421|1353870|1364068|1372400|1597531|1343422|1353871|1364069|1372401|1597532|1343423|1353872|1364070|1372402|1597533|1343424|1353873|1364071|1372403|1597534|1343425|1353874|1364072|1372404|1597535|1343426|1353875|1364073|1372405|1597536|1343427|1353876|1364074|1372406|1597537|1343428|1353877|1364075|1372407|1597538|1343429|1353878|1364076|1372408|1597539|1343430|1353879|1364077|1372409|1597540|1343431|1353880|1364078|1372410|1597541|1343432|1353881|1364079|1372411|1597542|1343433|1353882|1364080|1372412|1597543|1343434|1353883|1364081|1372413|1597544|1343435|1353884|1364082|1372414|1597545|1343436|1353885|1364083|1372415|1597546|1343437|1353886|1364084|1372416|1597547|1343438|1353887|1364085|1372417|1597548|1343439|1353888|1364086|1372418|1597549|1343560|1353889|1364087|1372419|1597550|1343561|1353890|1364088|1372480|1597551|1343562|1353891|1364089|1372481|1597552|
                1343203|1353532|1363245|1371922|1392953|1592058|1343204|1353533|1363246|1371923|1392954|1592059|1343205|1353534|1363247|1371924|1392955|1592075|1343206|1353535|1363248|1371925|1392956|1592076|1343207|1353536|1363249|1371926|1392957|1592077|1343208|1353537|1364020|1371927|1392958|1592078|1343209|1353538|1364021|1371928|1392959|1592079|1343390|1353539|1364022|1371929|1592080|1343391|1353540|1364023|1371930|1592081|1343392|1353541|1364024|1371931|1592082|1343393|1353542|1364025|1371932|1592083|1343394|1353543|1364026|1371933|1592084|1343395|1353544|1364027|1371934|1592085|1343396|1353545|1364028|1371935|1592086|1343397|1353546|1364029|1371936|1592087|1343398|1353547|1364030|1371937|1592088|1343399|1353548|1364031|1371938|1592089|1343410|1353549|1364032|1371939|1592090|1343411|1353550|1364033|1371940|1592091|1343412|1353551|1364034|1371941|1592092|1343413|1353552|1364060|1371942|1592093|1343414|1353553|1364061|1371943|1592094|1343415|1353554|1364062|1371944|1592095|1343416|1353555|1364063|1371945|1592096|
                1343032|1353511|1363224|1371901|1392882|1592037|1343033|1353512|1363225|1371902|1392883|1592038|1343034|1353513|1363226|1371903|1392884|1592039|1343035|1353514|1363227|1371904|1392885|1592040|1343036|1353515|1363228|1371905|1392886|1592041|1343037|1353516|1363229|1371906|1392887|1592042|1343038|1353517|1363230|1371907|1392888|1592043|1343039|1353518|1363231|1371908|1392889|1592044|1343100|1353519|1363232|1371909|1392890|1592045|1343101|1353520|1363233|1371910|1392891|1592046|1343102|1353521|1363234|1371911|1392892|1592047|1343103|1353522|1363235|1371912|1392893|1592048|1343104|1353523|1363236|1371913|1392894|1592049|1343105|1353524|1363237|1371914|1392895|1592050|1343106|1353525|1363238|1371915|1392896|1592051|1343107|1353526|1363239|1371916|1392897|1592052|1343108|1353527|1363240|1371917|1392898|1592053|1343109|1353528|1363241|1371918|1392899|1592054|1343200|1353529|1363242|1371919|1392950|1592055|1343201|1353530|1363243|1371920|1392951|1592056|1343202|1353531|1363244|1371921|1392952|1592057|1343031|1353510|1363223|1371900|1392881|1592036|
                1342880|1353389|1363142|1371159|1392640|1591965|1342881|1353390|1363143|1371160|1392641|1591966|1342882|1353391|1363144|1371161|1392642|1591967|1342883|1353392|1363145|1371162|1392643|1591968|1342884|1353393|1363146|1371163|1392644|1591969|1342885|1353394|1363147|1371164|1392645|1592010|1342886|1353395|1363148|1371165|1392646|1592011|1342887|1353396|1363149|1371166|1392647|1592012|1342888|1353397|1363210|1371167|1392648|1592013|1342889|1353398|1363211|1371168|1392649|1592014|1343020|1353399|1363212|1371169|1392870|1592015|1343021|1353500|1363213|1371170|1392871|1592016|1343022|1353501|1363214|1371171|1392872|1592017|1343023|1353502|1363215|1371172|1392873|1592018|1343024|1353503|1363216|1371173|1392874|1592019|1343025|1353504|1363217|1371174|1392875|1592030|1343026|1353505|1363218|1371175|1392876|1592031|1343027|1353506|1363219|1371176|1392877|1592032|1343028|1353507|1363220|1371177|1392878|1592033|1343029|1353508|1363221|1371178|1392879|1592034|1343030|1353509|1363222|1371179|1392880|1592035|1342769|1353388|1363141|1371158|1392629|1591964|
                1342752|1353371|1362284|1371141|1382848|1392612|1588991|1591882|1342753|1353372|1362285|1371142|1382849|1392613|1588992|1591883|1342754|1353373|1362286|1371143|1382970|1392614|1588993|1591884|1342755|1353374|1362287|1371144|1382971|1392615|1588994|1591885|1342756|1353375|1362288|1371145|1382972|1392616|1588995|1591886|1342757|1353376|1362289|1371146|1382973|1392617|1588996|1591887|1342758|1353377|1363130|1371147|1382974|1392618|1588997|1591888|1342759|1353378|1363131|1371148|1382975|1392619|1588998|1591889|1342760|1353379|1363132|1371149|1382976|1392620|1588999|1591930|1342761|1353380|1363133|1371150|1382977|1392621|1589995|1591931|1342762|1353381|1363134|1371151|1382978|1392622|1589996|1591932|1342763|1353382|1363135|1371152|1382979|1392623|1589997|1591933|1342764|1353383|1363136|1371153|1388990|1392624|1589999|1591934|1342765|1353384|1363137|1371154|1392625|1591960|1342766|1353385|1363138|1371155|1392626|1591961|1342767|1353386|1363139|1371156|1392627|1591962|1342768|1353387|1363140|1371157|1392628|1591963|
                1342408|1353357|1362223|1371127|1382644|1392518|1508808|1587533|1591868|1342409|1353358|1362224|1371128|1382645|1392519|1508809|1587534|1591869|1342410|1353359|1362225|1371129|1382646|1392600|1508989|1587650|1591870|1342411|1353360|1362226|1371130|1382647|1392601|1509995|1587651|1591871|1342412|1353361|1362227|1371131|1382648|1392602|1509996|1587652|1591872|1342413|1353362|1362228|1371132|1382649|1392603|1509997|1587653|1591873|1342414|1353363|1362229|1371133|1382840|1392604|1509998|1587654|1591874|1342445|1353364|1362274|1371134|1382841|1392605|1509999|1587655|1591875|1342446|1353365|1362275|1371135|1382842|1392606|1587656|1591876|1342447|1353366|1362276|1371136|1382843|1392607|1587657|1591877|1342448|1353367|1362280|1371137|1382844|1392608|1587658|1591878|1342449|1353368|1362281|1371138|1382845|1392609|1587659|1591879|1342750|1353369|1362282|1371139|1382846|1392610|1587689|1591880|1342751|1353370|1362283|1371140|1382847|1392611|1588990|1591881|1342407|1353356|1362222|1371126|1382643|1392517|1508807|1587532|1591867|
                1342363|1353342|1361141|1371112|1382619|1392503|1501848|1581888|1591853|1342364|1353343|1361142|1371113|1382620|1392504|1501849|1581889|1591854|1342365|1353344|1361143|1371114|1382621|1392505|1501870|1582020|1591855|1342366|1353345|1361144|1371115|1382622|1392506|1501871|1582021|1591856|1342367|1353346|1361145|1371116|1382623|1392507|1501872|1582022|1591857|1342368|1353347|1361146|1371117|1382624|1392508|1501873|1582023|1591858|1342369|1353348|1361147|1371118|1382625|1392509|1501874|1582024|1591859|1342400|1353349|1361148|1371119|1382626|1392510|1501875|1582025|1591860|1342401|1353350|1361149|1371120|1382627|1392511|1501876|1582026|1591861|1342402|1353351|1362040|1371121|1382628|1392512|1501877|1582027|1591862|1342403|1353352|1362041|1371122|1382629|1392513|1501878|1582028|1591863|1342404|1353353|1362042|1371123|1382640|1392514|1501879|1582029|1591864|1342405|1353354|1362220|1371124|1382641|1392515|1508805|1587530|1591865|1342406|1353355|1362221|1371125|1382642|1392516|1508806|1587531|1591866|1342362|1353341|1361140|1371111|1382618|1392502|1501847|1581887|1591852|
                1342229|1353328|1361024|1371098|1382605|1392422|1474438|1501754|1581814|1591749|1342230|1353329|1361025|1371099|1382606|1392423|1474439|1501755|1581815|1591840|1342231|1353330|1361026|1371100|1382607|1392424|1501756|1581816|1591841|1342232|1353331|1361027|1371101|1382608|1392425|1501757|1581817|1591842|1342233|1353332|1361028|1371102|1382609|1392426|1501758|1581818|1591843|1342234|1353333|1361029|1371103|1382610|1392427|1501759|1581819|1591844|1342235|1353334|1361030|1371104|1382611|1392428|1501840|1581880|1591845|1342236|1353335|1361031|1371105|1382612|1392429|1501841|1581881|1591846|1342237|1353336|1361032|1371106|1382613|1392430|1501842|1581882|1591847|1342238|1353337|1361033|1371107|1382614|1392431|1501843|1581883|1591848|1342239|1353338|1361034|1371108|1382615|1392432|1501844|1581884|1591849|1342360|1353339|1361035|1371109|1382616|1392500|1501845|1581885|1591850|1342361|1353340|1361036|1371110|1382617|1392501|1501846|1581886|1591851|1342228|1353327|1361023|1371097|1382604|1392421|1474437|1501753|1581813|1591748|
                1342216|1353315|1361011|1371085|1382512|1392409|1474425|1501421|1581711|1591736|1342217|1353316|1361012|1371086|1382513|1392410|1474426|1501422|1581712|1591737|1342218|1353317|1361013|1371087|1382514|1392411|1474427|1501423|1581713|1591738|1342219|1353318|1361014|1371088|1382515|1392412|1474428|1501424|1581714|1591739|1342220|1353319|1361015|1371089|1382516|1392413|1474429|1501425|1581715|1591740|1342221|1353320|1361016|1371090|1382517|1392414|1474430|1501426|1581716|1591741|1342222|1353321|1361017|1371091|1382518|1392415|1474431|1501427|1581717|1591742|1342223|1353322|1361018|1371092|1382519|1392416|1474432|1501428|1581718|1591743|1342224|1353323|1361019|1371093|1382600|1392417|1474433|1501429|1581719|1591744|1342225|1353324|1361020|1371094|1382601|1392418|1474434|1501750|1581810|1591745|1342226|1353325|1361021|1371095|1382602|1392419|1474435|1501751|1581811|1591746|1342227|1353326|1361022|1371096|1382603|1392420|1474436|1501752|1581812|1591747|1342215|1353314|1361010|1371084|1382511|1392408|1474424|1501420|1581710|1591735|
                1342203|1353302|1360978|1371072|1382449|1392277|1474412|1501333|1581588|1591588|1342204|1353303|1360979|1371073|1382500|1392278|1474413|1501334|1581589|1591589|1342205|1353304|1361000|1371074|1382501|1392279|1474414|1501335|1581700|1591590|1342206|1353305|1361001|1371075|1382502|1392309|1474415|1501336|1581701|1591591|1342207|1353306|1361002|1371076|1382503|1392400|1474416|1501337|1581702|1591592|1342208|1353307|1361003|1371077|1382504|1392401|1474417|1501338|1581703|1591593|1342209|1353308|1361004|1371078|1382505|1392402|1474418|1501339|1581704|1591594|1342210|1353309|1361005|1371079|1382506|1392403|1474419|1501415|1581705|1591595|1342211|1353310|1361006|1371080|1382507|1392404|1474420|1501416|1581706|1591596|1342212|1353311|1361007|1371081|1382508|1392405|1474421|1501417|1581707|1591597|1342213|1353312|1361008|1371082|1382509|1392406|1474422|1501418|1581708|1591598|1342214|1353313|1361009|1371083|1382510|1392407|1474423|1501419|1581709|1591599|1342202|1353301|1360977|1371071|1382448|1392276|1474411|1501332|1581587|1591587|
                1341810|1352779|1360907|1371059|1382226|1392244|1471674|1501320|1581485|1591575|1341811|1352780|1360908|1371060|1382227|1392245|1474400|1501321|1581486|1591576|1341812|1352781|1360909|1371061|1382228|1392246|1474401|1501322|1581487|1591577|1341813|1352782|1360960|1371062|1382229|1392247|1474402|1501323|1581488|1591578|1341814|1352783|1360964|1371063|1382440|1392248|1474403|1501324|1581489|1591579|1341815|1352784|1360970|1371064|1382441|1392249|1474404|1501325|1581580|1591580|1341816|1352785|1360971|1371065|1382442|1392270|1474405|1501326|1581581|1591581|1341817|1352786|1360972|1371066|1382443|1392271|1474406|1501327|1581582|1591582|1341818|1352787|1360973|1371067|1382444|1392272|1474407|1501328|1581583|1591583|1341819|1352788|1360974|1371068|1382445|1392273|1474408|1501329|1581584|1591584|1342200|1352789|1360975|1371069|1382446|1392274|1474409|1501330|1581585|1591585|1342201|1353300|1360976|1371070|1382447|1392275|1474410|1501331|1581586|1591586|1341809|1352778|1360906|1371058|1382225|1392243|1471673|1501319|1572876|1581484|1591574|
                1341648|1352767|1360285|1371047|1382214|1392232|1471662|1501308|1511889|1522003|1572407|1581453|1591448|1341649|1352768|1360286|1371048|1382215|1392233|1471663|1501309|1522004|1572411|1581454|1591449|1341800|1352769|1360287|1371049|1382216|1392234|1471664|1501310|1572818|1581455|1591450|1341801|1352770|1360288|1371050|1382217|1392235|1471665|1501311|1572819|1581456|1591451|1341802|1352771|1360289|1371051|1382218|1392236|1471666|1501312|1572820|1581457|1591452|1341803|1352772|1360900|1371052|1382219|1392237|1471667|1501313|1572841|1581458|1591453|1341804|1352773|1360901|1371053|1382220|1392238|1471668|1501314|1572849|1581459|1591454|1341805|1352774|1360902|1371054|1382221|1392239|1471669|1501315|1572854|1581480|1591570|1341806|1352775|1360903|1371055|1382222|1392240|1471670|1501316|1572857|1581481|1591571|1341807|1352776|1360904|1371056|1382223|1392241|1471671|1501317|1572873|1581482|1591572|1341808|1352777|1360905|1371057|1382224|1392242|1471672|1501318|1572875|1581483|1591573|1341647|1352766|1360284|1371046|1382213|1392231|1471661|1501307|1511888|1522002|1572406|1581452|1591447|
                1341637|1351276|1360274|1371036|1380887|1392221|1471651|1501242|1511382|1521882|1571814|1581332|1591437|1341638|1351277|1360275|1371037|1380888|1392222|1471652|1501243|1511383|1521883|1571838|1581333|1591438|1341639|1351278|1360276|1371038|1380889|1392223|1471653|1501244|1511384|1521884|1571841|1581334|1591439|1341640|1351279|1360277|1371039|1380920|1392224|1471654|1501300|1511385|1521885|1571844|1581335|1591440|1341641|1352760|1360278|1371040|1380924|1392225|1471655|1501301|1511386|1521886|1572085|1581336|1591441|1341642|1352761|1360279|1371041|1380928|1392226|1471656|1501302|1511387|1521887|1572086|1581337|1591442|1341643|1352762|1360280|1371042|1380977|1392227|1471657|1501303|1511388|1521888|1572087|1581338|1591443|1341644|1352763|1360281|1371043|1382210|1392228|1471658|1501304|1511389|1521889|1572088|1581339|1591444|1341645|1352764|1360282|1371044|1382211|1392229|1471659|1501305|1511886|1522000|1572089|1581450|1591445|1341646|1352765|1360283|1371045|1382212|1392230|1471660|1501306|1511887|1522001|1572405|1581451|1591446|
                1341628|1350928|1360245|1371027|1380295|1392212|1471628|1501193|1511218|1521769|1571188|1581243|1591428|1871947|1341629|1350929|1360246|1371028|1380296|1392213|1471629|1501194|1511219|1521770|1571189|1581244|1591429|1341630|1350994|1360247|1371029|1380297|1392214|1471630|1501195|1511220|1521771|1571190|1581245|1591430|1341631|1351270|1360248|1371030|1380298|1392215|1471640|1501196|1511221|1521792|1571191|1581246|1591431|1341632|1351271|1360249|1371031|1380299|1392216|1471641|1501197|1511222|1521793|1571192|1581247|1591432|1341633|1351272|1360270|1371032|1380881|1392217|1471642|1501198|1511223|1521794|1571193|1581248|1591433|1341634|1351273|1360271|1371033|1380882|1392218|1471643|1501199|1511224|1521795|1571194|1581249|1591434|1341635|1351274|1360272|1371034|1380884|1392219|1471644|1501240|1511380|1521880|1571810|1581330|1591435|1341636|1351275|1360273|1371035|1380886|1392220|1471650|1501241|1511381|1521881|1571811|1581331|1591436|1341627|1350309|1360244|1371026|1380294|1392211|1471626|1501192|1511217|1521768|1571187|1581242|1591427|1871946");
        /// <summary>
        /// 是否为邮箱名
        /// </summary>
        public static bool IsEmail(string s)
        {
            if (string.IsNullOrEmpty(s))
                return true;
            return _emailregex.IsMatch(s);
        }

        /// <summary>
        /// 是否为手机号
        /// </summary>
        public static bool IsMobile(string s)
        {
            if (string.IsNullOrEmpty(s))
                return true;
            return _mobileregex.IsMatch(s);
        }
        /// <summary>
        /// 是否为广州移动号
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        public static bool IsGZYDModbile(string s)
        {
            if (string.IsNullOrEmpty(s))
                return false;
            return _gzydregex.Contains(s.Substring(0, 7));
        }
        /// <summary>
        /// 是否为固话号
        /// </summary>
        public static bool IsPhone(string s)
        {
            if (string.IsNullOrEmpty(s))
                return true;
            return _phoneregex.IsMatch(s);
        }

        /// <summary>
        /// 是否为IP
        /// </summary>
        public static bool IsIP(string s)
        {
            return _ipregex.IsMatch(s);
        }

        /// <summary>
        /// 是否是身份证号
        /// </summary>
        public static bool IsIdCard(string id)
        {
            if (string.IsNullOrEmpty(id))
                return true;
            if (id.Length == 18)
                return CheckIDCard18(id);
            else if (id.Length == 15)
                return CheckIDCard15(id);
            else
                return false;
        }

        /// <summary>
        /// 是否为18位身份证号
        /// </summary>
        private static bool CheckIDCard18(string Id)
        {
            long n = 0;
            if (long.TryParse(Id.Remove(17), out n) == false || n < Math.Pow(10, 16) || long.TryParse(Id.Replace('x', '0').Replace('X', '0'), out n) == false)
                return false;//数字验证

            string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91";
            if (address.IndexOf(Id.Remove(2)) == -1)
                return false;//省份验证

            string birth = Id.Substring(6, 8).Insert(6, "-").Insert(4, "-");
            DateTime time = new DateTime();
            if (DateTime.TryParse(birth, out time) == false)
                return false;//生日验证

            string[] arrVarifyCode = ("1,0,x,9,8,7,6,5,4,3,2").Split(',');
            string[] Wi = ("7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2").Split(',');
            char[] Ai = Id.Remove(17).ToCharArray();
            int sum = 0;
            for (int i = 0; i < 17; i++)
                sum += int.Parse(Wi[i]) * int.Parse(Ai[i].ToString());

            int y = -1;
            Math.DivRem(sum, 11, out y);
            if (arrVarifyCode[y] != Id.Substring(17, 1).ToLower())
                return false;//校验码验证

            return true;//符合GB11643-1999标准
        }

        /// <summary>
        /// 是否为15位身份证号
        /// </summary>
        private static bool CheckIDCard15(string Id)
        {
            long n = 0;
            if (long.TryParse(Id, out n) == false || n < Math.Pow(10, 14))
                return false;//数字验证

            string address = "11x22x35x44x53x12x23x36x45x54x13x31x37x46x61x14x32x41x50x62x15x33x42x51x63x21x34x43x52x64x65x71x81x82x91";
            if (address.IndexOf(Id.Remove(2)) == -1)
                return false;//省份验证

            string birth = Id.Substring(6, 6).Insert(4, "-").Insert(2, "-");
            DateTime time = new DateTime();
            if (DateTime.TryParse(birth, out time) == false)
                return false;//生日验证

            return true;//符合15位身份证标准
        }

        /// <summary>
        /// 是否为日期
        /// </summary>
        public static bool IsDate(string s)
        {
            return _dateregex.IsMatch(s);
        }

        /// <summary>
        /// 是否是数值(包括整数和小数)
        /// </summary>
        public static bool IsNumeric(string numericStr)
        {
            return _numericregex.IsMatch(numericStr);
        }

        /// <summary>
        /// 是否为邮政编码
        /// </summary>
        public static bool IsZipCode(string s)
        {
            if (string.IsNullOrEmpty(s))
                return true;
            return _zipcoderegex.IsMatch(s);
        }

        /// <summary>
        /// 是否是图片文件名
        /// </summary>
        /// <returns> </returns>
        public static bool IsImgFileName(string fileName)
        {
            if (fileName.IndexOf(".") == -1)
                return false;

            string tempFileName = fileName.Trim().ToLower();
            string extension = tempFileName.Substring(tempFileName.LastIndexOf("."));
            return extension == ".png" || extension == ".bmp" || extension == ".jpg" || extension == ".jpeg" || extension == ".gif";
        }

        /// <summary>
        /// 判断一个ip是否在另一个ip内
        /// </summary>
        /// <param name="sourceIP">检测ip</param>
        /// <param name="targetIP">匹配ip</param>
        /// <returns></returns>
        public static bool InIP(string sourceIP, string targetIP)
        {
            if (string.IsNullOrEmpty(sourceIP) || string.IsNullOrEmpty(targetIP))
                return false;

            string[] sourceIPBlockList = StringHelper.SplitString(sourceIP, @".");
            string[] targetIPBlockList = StringHelper.SplitString(targetIP, @".");

            int sourceIPBlockListLength = sourceIPBlockList.Length;

            for (int i = 0; i < sourceIPBlockListLength; i++)
            {
                if (targetIPBlockList[i] == "*")
                    return true;

                if (sourceIPBlockList[i] != targetIPBlockList[i])
                {
                    return false;
                }
                else
                {
                    if (i == 3)
                        return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 判断一个ip是否在另一个ip内
        /// </summary>
        /// <param name="sourceIP">检测ip</param>
        /// <param name="targetIPList">匹配ip列表</param>
        /// <returns></returns>
        public static bool InIPList(string sourceIP, string[] targetIPList)
        {
            if (targetIPList != null && targetIPList.Length > 0)
            {
                foreach (string targetIP in targetIPList)
                {
                    if (InIP(sourceIP, targetIP))
                        return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 判断一个ip是否在另一个ip内
        /// </summary>
        /// <param name="sourceIP">检测ip</param>
        /// <param name="targetIPStr">匹配ip</param>
        /// <returns></returns>
        public static bool InIPList(string sourceIP, string targetIPStr)
        {
            string[] targetIPList = StringHelper.SplitString(targetIPStr, "\n");
            return InIPList(sourceIP, targetIPList);
        }

        /// <summary>
        /// 判断当前时间是否在指定的时间段内
        /// </summary>
        /// <param name="periodList">指定时间段</param>
        /// <param name="liePeriod">所处时间段</param>
        /// <returns></returns>
        public static bool BetweenPeriod(string[] periodList, out string liePeriod)
        {
            if (periodList != null && periodList.Length > 0)
            {
                DateTime startTime;
                DateTime endTime;
                DateTime nowTime = DateTime.Now;
                DateTime nowDate = nowTime.Date;

                foreach (string period in periodList)
                {
                    int index = period.IndexOf("-");
                    startTime = TypeHelper.StringToDateTime(period.Substring(0, index));
                    endTime = TypeHelper.StringToDateTime(period.Substring(index + 1));

                    if (startTime < endTime)
                    {
                        if (nowTime > startTime && nowTime < endTime)
                        {
                            liePeriod = period;
                            return true;
                        }
                    }
                    else
                    {
                        if ((nowTime > startTime && nowTime < nowDate.AddDays(1)) || (nowTime < endTime))
                        {
                            liePeriod = period;
                            return true;
                        }
                    }
                }
            }
            liePeriod = string.Empty;
            return false;
        }

        /// <summary>
        /// 判断当前时间是否在指定的时间段内
        /// </summary>
        /// <param name="periodStr">指定时间段</param>
        /// <param name="liePeriod">所处时间段</param>
        /// <returns></returns>
        public static bool BetweenPeriod(string periodStr, out string liePeriod)
        {
            string[] periodList = StringHelper.SplitString(periodStr, "\n");
            return BetweenPeriod(periodList, out liePeriod);
        }

        /// <summary>
        /// 判断当前时间是否在指定的时间段内
        /// </summary>
        /// <param name="periodList">指定时间段</param>
        /// <returns></returns>
        public static bool BetweenPeriod(string periodList)
        {
            string liePeriod = string.Empty;
            return BetweenPeriod(periodList, out liePeriod);
        }

        /// <summary>
        /// 是否是数值(包括整数和小数)
        /// </summary>
        public static bool IsNumericArray(string[] numericStrList)
        {
            if (numericStrList != null && numericStrList.Length > 0)
            {
                foreach (string numberStr in numericStrList)
                {
                    if (!IsNumeric(numberStr))
                        return false;
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// 是否是数值(包括整数和小数)
        /// </summary>
        public static bool IsNumericRule(string numericRuleStr, string splitChar)
        {
            return IsNumericArray(StringHelper.SplitString(numericRuleStr, splitChar));
        }

        /// <summary>
        /// 是否是数值(包括整数和小数)
        /// </summary>
        public static bool IsNumericRule(string numericRuleStr)
        {
            return IsNumericRule(numericRuleStr, ",");
        }
    }
}
